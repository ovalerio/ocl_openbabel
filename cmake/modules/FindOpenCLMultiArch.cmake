# - Try to find OpenCL
# This module tries to find an OpenCL implementation on your system. It supports
# AMD / ATI, Apple and NVIDIA implementations, but shoudl work, too.
#
# Once done this will define
#  OPENCL_FOUND        - system has OpenCL
#  OPENCL_INCLUDE_DIRS - the OpenCL include directory
#  OPENCL_LIBRARIES    - link these to use OpenCL
#  OPENCL_VENDOR
# WIN32 should work, but is untested

FIND_PACKAGE( PackageHandleStandardArgs )

SET (OPENCL_VERSION_STRING "0.1.0")
SET (OPENCL_VERSION_MAJOR 0)
SET (OPENCL_VERSION_MINOR 1)
SET (OPENCL_VERSION_PATCH 0)

SET(OPENCL_VENDOR "ANY" CACHE STRING "Choose OpenCL Vendor")
SET_PROPERTY(CACHE OPENCL_VENDOR PROPERTY STRINGS ANY NVIDIA ATI INTEL)

SET(OPENCL_VENDOR_INTERNAL "ANY" CACHE STRING "")
if (NOT OPENCL_VENDOR_INTERNAL MATCHES ${OPENCL_VENDOR})
    SET(OPENCL_INCLUDE_DIRS NOTFOUND CACHE PATH "" FORCE)
    SET(OPENCL_LIBRARIES NOTFOUND CACHE FILEPATH "" FORCE)
endif()
SET(OPENCL_VENDOR_INTERNAL ${OPENCL_VENDOR} CACHE STRING "" FORCE)

if(CMAKE_SIZEOF_VOID_P EQUAL 8)
  set(OPENCL_CUDA_ARCHEXT "64")
  set(OPENCL_ATI_ARCHLIB "x86_64")
  set(OPENCL_ATI_ARCHEXT "64")
else(CMAKE_SIZEOF_VOID_P EQUAL 8)
  set(OPENCL_CUDA_ARCHEXT "")
  set(OPENCL_ATI_ARCHLIB "x86")
  set(OPENCL_ATI_ARCHEXT "32")
endif(CMAKE_SIZEOF_VOID_P EQUAL 8)


IF (APPLE)

  FIND_LIBRARY(OPENCL_LIBRARIES OpenCL DOC "OpenCL lib for OSX")
  FIND_PATH(OPENCL_INCLUDE_DIRS OpenCL/cl.h DOC "Include for OpenCL on OSX")
  FIND_PATH(_OPENCL_CPP_INCLUDE_DIRS OpenCL/cl.hpp DOC "Include for OpenCL CPP bindings on OSX")

ELSEIF (WIN32)
	    FIND_PATH(OPENCL_INCLUDE_DIRS CL/cl.h)
	    FIND_PATH(_OPENCL_CPP_INCLUDE_DIRS CL/cl.hpp)
	
	    # The AMD SDK currently installs both x86 and x86_64 libraries
	    # This is only a hack to find out architecture
	    IF( ${CMAKE_SYSTEM_PROCESSOR} STREQUAL "AMD64" )
	    	SET(OPENCL_LIB_DIR "$ENV{ATISTREAMSDKROOT}/lib/x86_64")
	    ELSE (${CMAKE_SYSTEM_PROCESSOR} STREQUAL "AMD64")
	    	SET(OPENCL_LIB_DIR "$ENV{ATISTREAMSDKROOT}/lib/x86")
	    ENDIF( ${CMAKE_SYSTEM_PROCESSOR} STREQUAL "AMD64" )
	    FIND_LIBRARY(OPENCL_LIBRARIES OpenCL.lib ${OPENCL_LIB_DIR})
	    
	    GET_FILENAME_COMPONENT(_OPENCL_INC_CAND ${OPENCL_LIB_DIR}/../../include ABSOLUTE)
	    
	    # On Win32 search relative to the library
	    FIND_PATH(OPENCL_INCLUDE_DIRS CL/cl.h PATHS "${_OPENCL_INC_CAND}")
	    FIND_PATH(_OPENCL_CPP_INCLUDE_DIRS CL/cl.hpp PATHS "${_OPENCL_INC_CAND}")
	
ELSE ()
    # Unix style platforms
    SET(OPENCL_PLATFORMS)
    SET(OPENCL_CPU_SUPPORT FALSE)
    SET(OPENCL_GPU_SUPPORT FALSE)

    SET(OPENCL_INCLUDE_SEARCH_PATH)
    SET(OPENCL_LIBRARY_SEARCH_PATH)
	    
    IF (NOT DISABLE_HWCHECK AND EXISTS /usr/sbin/lspci)
	EXECUTE_PROCESS(
	    COMMAND /usr/sbin/lspci
	    RESULT_VARIABLE LSPCI_RESULT
	    OUTPUT_VARIABLE LSPCI_OUTPUT
	)
    ELSE ()
	SET(LSPCI_RESULT -1)
    ENDIF()

    IF ((OPENCL_VENDOR MATCHES "ANY") OR (OPENCL_VENDOR MATCHES "NVIDIA"))
	IF (CUDA_FOUND AND CUDA_CUDART_LIBRARY)
	    SET(OPENCL_PLATFORMS ${OPENCL_PLATFORMS} CUDA)

	    if (LSPCI_RESULT EQUAL 0)
		string(TOUPPER ${LSPCI_OUTPUT} LSPCI_OUTPUT_UC)
		if (LSPCI_OUTPUT_UC MATCHES "(GEFORCE|TESLA|VGA.*NVIDIA)")
		    SET(OPENCL_GPU_SUPPORT TRUE)
		endif()
	    else()
		# Assuming yes
		SET(OPENCL_GPU_SUPPORT TRUE)
	    endif()

	    GET_FILENAME_COMPONENT(OPENCL_CUDA_LIB_DIR ${CUDA_CUDART_LIBRARY} PATH)

	    SET(OPENCL_LIBRARY_SEARCH_PATH
		${OPENCL_LIBRARY_SEARCH_PATH}
		${OPENCL_CUDA_LIB_DIR}
	    )
	    
	    SET(OPENCL_INCLUDE_SEARCH_PATH
		${OPENCL_INCLUDE_SEARCH_PATH}
		${CUDA_TOOLKIT_ROOT_DIR}/include
	    )
	ENDIF()
    ENDIF()

    IF ((OPENCL_VENDOR MATCHES "ANY") OR (OPENCL_VENDOR MATCHES "ATI"))
	IF (ATI_TOOLKIT_FOUND AND ATI_TOOLKIT_LIBRARIES)
	    SET(OPENCL_PLATFORMS ${OPENCL_PLATFORMS} ATI)
		
	    SET(OPENCL_CPU_SUPPORT TRUE)
	    if (LSPCI_RESULT EQUAL 0)
		if (LSPCI_OUTPUT MATCHES ATI)
		    SET(OPENCL_GPU_SUPPORT TRUE)
		endif()
	    else()
		# Assuming yes
		SET(OPENCL_GPU_SUPPORT TRUE)
	    endif()
		
	    GET_FILENAME_COMPONENT(OPENCL_ATI_LIB_DIR ${ATI_TOOLKIT_LIBRARIES} PATH)

	    SET(OPENCL_LIBRARY_SEARCH_PATH
		${OPENCL_LIBRARY_SEARCH_PATH}
		${OPENCL_ATI_LIB_DIR}
	    )

	    SET(OPENCL_INCLUDE_SEARCH_PATH
		${OPENCL_INCLUDE_SEARCH_PATH}
		${ATI_TOOLKIT_ROOT_DIR}/include
	    )

	ENDIF()
    ENDIF()

    IF ((OPENCL_VENDOR MATCHES "ANY") OR (OPENCL_VENDOR MATCHES "INTEL"))
	IF (INTEL_OPENCL_TOOLKIT_FOUND AND INTEL_OPENCL_TOOLKIT_LIBRARIES)
	    SET(OPENCL_PLATFORMS ${OPENCL_PLATFORMS} INTEL)
		
	    SET(OPENCL_CPU_SUPPORT TRUE)
		
	    GET_FILENAME_COMPONENT(OPENCL_INTEL_LIB_DIR ${INTEL_OPENCL_TOOLKIT_LIBRARIES} PATH)

	    SET(OPENCL_LIBRARY_SEARCH_PATH
		${OPENCL_LIBRARY_SEARCH_PATH}
		${OPENCL_INTEL_LIB_DIR}
	    )

	    SET(OPENCL_INCLUDE_SEARCH_PATH
		${OPENCL_INCLUDE_SEARCH_PATH}
		${INTEL_OPENCL_TOOLKIT_ROOT_DIR}/include
	    )
	ENDIF()
    ENDIF()

    if (OPENCL_VENDOR MATCHES "ANY") 
	SET(OPENCL_LIBRARY_SEARCH_PATH
	    ${OPENCL_LIBRARY_SEARCH_PATH}
    	    ENV LD_LIBRARY_PATH
	)
	SET(OPENCL_INCLUDE_SEARCH_PATH
	    ${OPENCL_INCLUDE_SEARCH_PATH}
	    /usr/include 
	    /usr/local/include
	)
    endif ()

    FIND_LIBRARY(OPENCL_LIBRARIES
	NAMES OpenCL
	PATHS ${OPENCL_LIBRARY_SEARCH_PATH}
    )
    
    IF (OPENCL_LIBRARIES)
	GET_FILENAME_COMPONENT(OPENCL_LIB_DIR ${OPENCL_LIBRARIES} PATH)
    	GET_FILENAME_COMPONENT(OPENCL_RELATIVE_INCLUDE_DIR  ${OPENCL_LIB_DIR}/../../include ABSOLUTE)
	SET(OPENCL_INCLUDE_SEARCH_PATH ${OPENCL_INCLUDE_SEARCH_PATH} ${OPENCL_RELATIVE_INCLUDE_DIR})
	
        FIND_PATH(OPENCL_INCLUDE_DIRS CL/cl.h PATHS ${OPENCL_INCLUDE_SEARCH_PATH}) 
        FIND_PATH(_OPENCL_CPP_INCLUDE_DIRS CL/cl.hpp PATHS ${OPENCL_INCLUDE_SEARCH_PATH})
    ENDIF (OPENCL_LIBRARIES)
ENDIF ()

FIND_PACKAGE_HANDLE_STANDARD_ARGS( OpenCL DEFAULT_MSG OPENCL_LIBRARIES OPENCL_INCLUDE_DIRS )

IF( _OPENCL_CPP_INCLUDE_DIRS )
	SET( OPENCL_HAS_CPP_BINDINGS TRUE )
	LIST( APPEND OPENCL_INCLUDE_DIRS ${_OPENCL_CPP_INCLUDE_DIRS} )
	# This is often the same, so clean up
	LIST( REMOVE_DUPLICATES OPENCL_INCLUDE_DIRS )
ENDIF( _OPENCL_CPP_INCLUDE_DIRS )

MARK_AS_ADVANCED(
  OPENCL_LIBRARIES
  OPENCL_INCLUDE_DIRS
  OPENCL_ATI_LIBRARIES
  _OPENCL_CPP_INCLUDE_DIRS
  OPENCL_VENDOR_INTERNAL
)
